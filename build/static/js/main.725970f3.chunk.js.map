{"version":3,"sources":["Components/Formulario.js","Components/Cita.js","App.js","serviceWorker.js","index.js"],"names":["Formulario","crearCita","useState","mascota","propietario","fecha","hora","sintomas","cita","actualizarCita","error","actualizarError","actualizarState","e","target","name","value","className","onSubmit","preventDefault","trim","id","uuid","type","placeholder","onChange","Cita","eliminarCita","onClick","App","citasIniciales","JSON","parse","localStorage","getItem","citas","guardarCitas","useEffect","setItem","stringify","nuevasCitas","filter","titulo","length","map","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.725970f3.chunk.js","sourcesContent":["import React, { Fragment, useState } from 'react';\r\nimport { v4 as uuid } from 'uuid';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Formulario = ({crearCita}) => {\r\n\r\n    //Crear state de citas\r\n    const [cita, actualizarCita] = useState({\r\n        mascota: '',\r\n        propietario: '',\r\n        fecha: '',\r\n        hora: '',\r\n        sintomas: ''\r\n    });\r\n\r\n    const [error, actualizarError] = useState(false);\r\n\r\n    //Función que se ejecua cada que el usuario escribe en un imput\r\n    const actualizarState = (e) => {\r\n        actualizarCita({\r\n            ...cita,\r\n            [e.target.name]: e.target.value\r\n        })\r\n    };\r\n\r\n    //Cuando el usuario envia el formulario\r\n    const submitCita = (e) => {\r\n        e.preventDefault();\r\n        //Validar\r\n        if(mascota.trim() === '' || \r\n            propietario.trim() === '' || \r\n            fecha.trim() === '' || \r\n            hora.trim() === '' || \r\n            sintomas.trim() === ''){\r\n            actualizarError(true);\r\n            return;\r\n        }\r\n\r\n        //Eliminar el mensaje previo\r\n        actualizarError(false);\r\n\r\n        //Asignar un ID\r\n        cita.id = uuid();\r\n\r\n        //Crear la cita\r\n        crearCita(cita);\r\n\r\n        //Reiniciar el form\r\n        actualizarCita({\r\n            mascota: '',\r\n            propietario: '',\r\n            fecha: '',\r\n            hora: '',\r\n            sintomas: ''\r\n        })\r\n\r\n    }\r\n\r\n    //Extraes los valores\r\n    const {mascota, propietario, fecha, hora, sintomas} = cita;\r\n\r\n    return ( \r\n        <Fragment>\r\n            <h2>Crear Cita</h2>\r\n            { error ? <p className=\"alerta-error\">Todos los campos son obligatorios</p>:null}\r\n\r\n            <form \r\n                onSubmit={submitCita}\r\n            >\r\n                <label>Nombre Mascota</label>\r\n                <input\r\n                    type=\"text\"\r\n                    name=\"mascota\"\r\n                    className=\"u-full-width\"\r\n                    placeholder=\"Nombre Mascota\"\r\n                    onChange={actualizarState}\r\n                    value={mascota}\r\n                />\r\n                <label>Nombre del dueño</label>\r\n                <input\r\n                    type=\"text\"\r\n                    name=\"propietario\"\r\n                    className=\"u-full-width\"\r\n                    placeholder=\"Nombre del dueño\"\r\n                    onChange={actualizarState}\r\n                    value={propietario}\r\n                />\r\n                <label>Fecha</label>\r\n                <input\r\n                    type=\"date\"\r\n                    name=\"fecha\"\r\n                    className=\"u-full-width\"\r\n                    onChange={actualizarState}\r\n                    value={fecha}\r\n                />\r\n                <label>Hora</label>\r\n                <input\r\n                    type=\"time\"\r\n                    name=\"hora\"\r\n                    className=\"u-full-width\"\r\n                    onChange={actualizarState}\r\n                    value={hora}\r\n                />\r\n                <label>Síntomas</label>\r\n                <textarea\r\n                    name=\"sintomas\"\r\n                    className=\"u-full-width\"\r\n                    onChange={actualizarState}\r\n                    value={sintomas}\r\n                >\r\n                </textarea>\r\n                <button\r\n                    type=\"submit\"\r\n                    className=\"u-full-width button-primary\"\r\n                >\r\n                    Agregar cita\r\n                </button>\r\n            </form>\r\n        </Fragment>\r\n    );\r\n}\r\n\r\nFormulario.propTypes = {\r\n    crearCita: PropTypes.func.isRequired\r\n}\r\n \r\nexport default Formulario;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Cita = ({cita, eliminarCita}) => {\r\n    return ( \r\n        <div className=\"cita\">\r\n            <p>Mascota: <span>{cita.mascota}</span></p>\r\n            <p>Dueño: <span>{cita.propietario}</span></p>\r\n            <p>Fecha: <span>{cita.fecha}</span></p>\r\n            <p>Hora: <span>{cita.hora}</span></p>\r\n            <p>Sintomas: <span>{cita.sintomas}</span></p>\r\n\r\n            <button\r\n                className=\"button eliminar u-full-width\"\r\n                onClick={() => {eliminarCita(cita.id)}}\r\n            >\r\n                Eliminar &times;\r\n            </button>\r\n        </div>\r\n     );\r\n}\r\n\r\nCita.propTypes = {\r\n    cita: PropTypes.object.isRequired,\r\n    eliminarCita: PropTypes.func.isRequired\r\n}\r\n \r\nexport default Cita;","import React, {Fragment, useState, useEffect} from 'react';\nimport Formulario from './Components/Formulario';\nimport Cita from './Components/Cita';\n\nfunction App() {\n\t//Citas en local storage\n\tlet citasIniciales = JSON.parse(localStorage.getItem('citas'));\n\tif(!citasIniciales){\n\t\tcitasIniciales = [];\n\t}\n\t//Arreglo de citas\n\tconst [citas, guardarCitas] = useState(citasIniciales);\n\n\t//UseEffect para realizar ciertas operaciones cuando el state cambia\n\tuseEffect(() => {\n\t\tlet citasIniciales = JSON.parse(localStorage.getItem('citas'));\n\t\tif(citasIniciales){\n\t\t\tlocalStorage.setItem('citas', JSON.stringify(citas));\n\t\t}else{\n\t\t\tlocalStorage.setItem('citas', JSON.stringify([]));\n\t\t}\n\t}, [citas]);\n\n\t//Función que tome las citas actuales y agregue la nueva\n\tconst crearCita = (cita) =>{\n\t\tguardarCitas([\n\t\t\t...citas,\n\t\t\tcita\n\t\t])\n\t}\n\n\t//Función que elimina una cita por su id\n\tconst eliminarCita = (id) => {\n\t\tconst nuevasCitas = citas.filter(cita => cita.id !== id);\n\t\tguardarCitas(nuevasCitas);\n\t}\n\n\t//Mensaje condicional\n\tconst titulo = citas.length === 0 ? 'No hay citas' : 'Administra tus citas';\n\n  \treturn (\n\t\t<Fragment>\n\t\t\t<h1>Administración de pacientes</h1>\n\t\t\t<div className=\"container\">\n\t\t\t\t<div className=\"one-half column\">\n\t\t\t\t\t<Formulario\n\t\t\t\t\t\tcrearCita={crearCita}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"one-half column\">\n\t  \t\t\t\t<h2>{titulo}</h2>\n\t\t\t\t\t{citas.map(cita => (\n\t\t\t\t\t\t<Cita\n\t\t\t\t\t\t\tkey={cita.id}\n\t\t\t\t\t\t\tcita={cita}\n\t\t\t\t\t\t\teliminarCita = {eliminarCita}\n\t\t\t\t\t\t/>\n\t\t\t\t\t))}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</Fragment>\n  \t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}